//funcao auxiliar ;;; DEVERA SER EXCLUIDA POSTERIORMENTE
void tradutor_aux(FILE* fpin);

void tradutor_aux(FILE* fpin){
    if(fpin){
        rewind(fpin);
        unsigned long n = 0;
        fread(&n, sizeof(unsigned long), 1, fpin);
        puts("ASCII");
        printf("%lx", n);
        for(char c = fgetc(fpin); c!=EOF ;c = fgetc(fpin)){
            printf("%c", (unsigned char)c);
        }
        rewind(fpin);
        puts("\nBINARIO");
        fread(&n, sizeof(unsigned long), 1, fpin);
        printf("%lx", n);
        unsigned char bit = 0;
        for(int c = fgetc(fpin); c!=EOF ;c = fgetc(fpin)){
            for(unsigned i=0;i<8;i++){
                bit = c&0x80;   //0x80 = 128 :: armazenando o valor contido no bit de menor significância na variável letra
                bit >>= 7;      //como o bit de menor significância está na última casa da célula, é preciso fazer um rshift de 7 casas para converter o valor para unitário (1 ou 0)
                c = c<<1;       //atualiza-se a letra com um lshift para trazer o bit a direita do lido anterior para a posição de leitura da iteração seguinte
                printf("%x", bit);
            }
        }
        rewind(fpin);
    }
}


void descompactar(char* nomeArquivoBinario, char* nomeArquivoSaida){
    if(nomeArquivoBinario && nomeArquivoSaida){
        FILE *fpin = fopen(nomeArquivoBinario, "rb"), *fpout = fopen(nomeArquivoSaida, "w");
        assert(fpin, "Erro ao gerar arquivo compactado! Terminando programa...");
        bitmap* bm = remontar_mapa_forma_bitmap(fpin);
        //a função anterior foi pensada para deixar propositalmente o leitor do arquivo fpin posicionada para a leitura do primeiro caracter da descompactação, por isso a lógica seguinte parte desse pressuposto
        
        tradutor_aux(fpin);
        putchar('\n');
        puts("Mapa de bits lido do arquivo:");
        bitmapUnloadContents(bm, stdout);
        putchar('\n');
        for(unsigned i=0;i<bitmapGetLength(bm);i++){
            printf("%x", bitmapGetBit(bm, i));
        }
        putchar('\n');


        mapa* map = reconstruir_mapa_forma_original(bm);
        imprimir_mapa(map);        
        liberar_mapa(map);
        
        bitmapLibera(bm);

        fclose(fpin);
        fclose(fpout);
    }
}